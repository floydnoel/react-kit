{"version":3,"sources":["components/markdown/readme.md","components/markdown/markdown-utils.js","components/markdown/markdown.js","components/text-field/text-field.js","components/router/router.js","docs/app.js","docs/service-worker.js","components/markdown/markdown.story.js","docs/index.js","docs/README.md"],"names":["module","exports","getSectionContent","content","section","key","indexOf","slice","result","cur","split","forEach","e","link","toLowerCase","join","getContentSections","Markdown","markdown","markdownUrl","Link","children","initializingMessage","fetchingMessage","noMarkdownMessage","rest","useState","setContent","useEffect","fetchText","a","url","fetch","response","text","body","then","con","options","overrides","component","defaultProps","TextField","value","onChange","onChangeValue","style","type","width","target","Router","basename","href","to","console","log","winner","App","className","readme","textAlign","maxWidth","margin","padding","Boolean","window","location","hostname","match","MarkdownStory","setMarkdownUrl","background","onClick","ReactDOM","render","StrictMode","exact","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.55ece058.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/readme.a16e5313.md\";","const convertToLink = (sectionTitle) => {\n  return sectionTitle.toLowerCase().split(' ').slice(1).join('-')\n}\n\nconst getContentSections = (content) => {\n  const result = {}\n  let cur = ''\n  content.split('\\n\\n').forEach((e) => {\n    if (e.indexOf('#') === 0) {\n      const link = convertToLink(e)\n      cur = link\n      result[link] = [e]\n    } else if (cur) {\n      result[cur] = [...result[cur], e]\n    }\n  })\n  return result\n}\n\nconst getSectionContent = ({ content, section }) => {\n  const key = section.indexOf('#') === 0 ? section.slice(1) : section\n  return getContentSections(content)[key]?.join('\\n\\n') || ''\n}\n\nexport { convertToLink, getContentSections, getSectionContent }\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\nimport MarkdownToJsx from 'markdown-to-jsx'\nimport { Link } from 'components'\n\nimport { getSectionContent } from './markdown-utils'\n\n// ***TODOS***\n// - better code blocks & styling\n// - handle external links\n// - option to throw instead?\n// - log possible errors?\n\nlet Markdown = ({\n  markdown,\n  markdownUrl,\n  link = Link,\n  section,\n  children = markdown,\n  // verbose,\n  initializingMessage,\n  fetchingMessage,\n  noMarkdownMessage,\n  ...rest\n}) => {\n  let [content, setContent] = useState(children || initializingMessage)\n  useEffect(() => {\n    let fetchText = async ({ url }) => {\n      let response = await fetch(url)\n      let body = await response.text()\n      return body\n    }\n    if (markdownUrl) {\n      if (fetchingMessage) setContent(fetchingMessage)\n      fetchText({ url: markdownUrl }).then((content) => {\n        if (section) {\n          let con = getSectionContent({ content, section })\n          setContent(con ? con : noMarkdownMessage)\n        } else if (content.indexOf('<!DOCTYPE html>') === 0) {\n          setContent(noMarkdownMessage)\n        } else {\n          setContent(content)\n        }\n      })\n    }\n  }, [fetchingMessage, noMarkdownMessage, markdownUrl, section])\n\n  if (!children && !markdownUrl) return noMarkdownMessage\n  return (\n    <MarkdownToJsx\n      {...{\n        options: {\n          overrides: {\n            a: {\n              component: link,\n              // props: {\n              //   className: 'foo',\n              // },\n            },\n          },\n        },\n        // style: {\n        //   animation: 'slidein 3s',\n        // },\n        ...rest,\n      }}\n    >\n      {content}\n    </MarkdownToJsx>\n  )\n}\n\nMarkdown.propTypes = {\n  markdown: PropTypes.string,\n  markdownUrl: PropTypes.string,\n  link: PropTypes.element,\n  section: PropTypes.string,\n  children: PropTypes.string,\n  // verbose: PropTypes.bool,\n  initializingMessage: PropTypes.string,\n  fetchingMessage: PropTypes.string,\n  noMarkdownMessage: PropTypes.string,\n  rest: PropTypes.any,\n}\n\nMarkdown.defaultProps = {\n  // verbose: true,\n  // link: Link,\n  initializingMessage: '',\n  fetchingMessage: '',\n  noMarkdownMessage: '',\n}\n\nexport default Markdown\n","import React from 'react'\n\nconst TextField = ({\n  value,\n  onChange,\n  onChangeValue,\n  children,\n  style,\n  ...rest\n}) => {\n  return (\n    <input\n      {...{\n        type: 'text',\n        value: value || children,\n        style: { width: '100%', ...style },\n        onChange: (e) => {\n          if (onChange) onChange(e)\n          if (onChangeValue) onChangeValue(e.target.value)\n        },\n        ...rest,\n      }}\n      // type=\"text\"\n      // value={value || children}\n      // style={{ width: \"100%\", ...style }}\n      // onChange={(e) => {\n      //   if (onChange) onChange(e);\n      //   if (onChangeValue) onChangeValue(e.target.value);\n      // }}\n      // {...rest}\n    />\n  )\n}\n\nexport default TextField\n","import React from 'react'\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  Link as BrowserLink,\n} from 'react-router-dom'\n\nconst Router = ({\n  // TODO: get from homepage in package.json or somewhere\n  basename = '/react-kit',\n  children,\n  ...rest\n}) => <BrowserRouter {...{ basename, ...rest }}>{children}</BrowserRouter>\n\nconst Link = ({\n  // copy `href` to `to` if necessary\n  href,\n  to,\n  children,\n  ...rest\n}) => {\n  console.log({ href, to, winner: to || href })\n  return <BrowserLink {...{ to: to || href, ...rest }}>{children}</BrowserLink>\n}\n\nexport { Router, Switch, Route, //MyLink as \nLink }\n// https://reactrouter.com/web/guides/quick-start\n// basename: process.env.PUBLIC_URL\n// https://github.com/facebook/create-react-app/issues/1765\n","/* eslint-disable flowtype/require-valid-file-annotation */\nimport React from 'react'\n// import logo from './logo.svg';\nimport './app.css'\nimport { Markdown } from 'components'\n// import TextField from 'components/interaction/text-field/text-field';\n// import json from './package.json';\nimport readme from './README.md'\n\n// const Json = () => <div>{JSON.stringify(json)}</div>;\n\nfunction App() {\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <Markdown\n          markdownUrl={readme}\n          section={`react-kit`}\n        />\n      </header>\n      {/* <Json>{json}</Json> */}\n      <p>\n        [ <a href='https://floydnoel.github.io/react-kit/'>docs</a>,{' '}\n        <a href='https://github.com/floydnoel/react-kit'>repo</a> ]\n      </p>\n      <div\n        style={{\n          textAlign: 'left',\n          maxWidth: '800px',\n          margin: '1em auto',\n          padding: '1em',\n        }}\n      >\n        <Markdown markdownUrl={readme} section={'about'} />\n        <Markdown markdownUrl={readme} section={'components'} />\n        <Markdown markdownUrl={readme} section={'code-conventions'} />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React, { useState } from 'react'\nimport {\n  // Router,\n  // Switch,\n  // Route,\n  Markdown,\n  TextField,\n} from 'components'\nimport readme from './readme.md'\n// import { Link } from 'react-router-dom'\n\nconst MarkdownStory = () => {\n  const [markdownUrl, setMarkdownUrl] = useState('')\n  return (\n    <div style={{ maxWidth: '800px', margin: '0 auto' }}>\n      <Markdown markdownUrl={readme} />\n      <div\n        style={{\n          background: 'rgb(246, 248, 250)',\n          textAlign: 'left',\n          padding: '1em',\n          maxWidth: '900px',\n          margin: '32px auto',\n        }}\n      >\n        <h2>Demo: Load any markdown from a URL here</h2>\n        <div>\n          Try{' '}\n          <code>\n            https://raw.githubusercontent.com/probablyup/markdown-to-jsx/master/README.md\n          </code>\n        </div>\n        <TextField onChangeValue={setMarkdownUrl}>{markdownUrl}</TextField>\n        <button\n          onClick={() =>\n            setMarkdownUrl(\n              'https://raw.githubusercontent.com/probablyup/markdown-to-jsx/master/README.md'\n            )\n          }\n        >\n          reset\n        </button>\n        <Markdown\n          noMarkdownMessage='Specify a markdown URL to begin'\n          markdownUrl={markdownUrl}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default MarkdownStory\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from 'docs/app'\nimport { Router, Switch, Route } from 'components'\n\nimport * as serviceWorker from 'docs/service-worker'\nimport MarkdownStory from 'components/markdown/markdown.story'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Switch>\n        <Route exact path='/src/components/markdown'>\n          <MarkdownStory />\n        </Route>\n        <Route>\n          <App />\n        </Route>\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/README.afa66397.md\";"],"sourceRoot":""}