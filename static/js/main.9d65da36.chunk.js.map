{"version":3,"sources":["components/presentation/markdown/markdown.js","App.js","serviceWorker.js","index.js","test.md"],"names":["Markdown","markdown","markdownUrl","loadingMessage","children","rest","useState","content","setContent","useEffect","a","url","fetch","response","text","body","fetchText","then","defaultProps","App","className","test","style","background","textAlign","padding","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"sTAIMA,EAAW,SAAC,GAMX,IALLC,EAKI,EALJA,SACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,eACAC,EAEI,EAFJA,SACGC,EACC,wEAC0BC,mBAC5BF,GAAYH,GAAYE,GAFtB,mBACGI,EADH,KACYC,EADZ,KAcJ,OAVAC,qBAAU,WAMJP,GALW,uCAAG,iCAAAQ,EAAA,6DAASC,EAAT,EAASA,IAAT,SACOC,MAAMD,GADb,cACVE,EADU,gBAEGA,EAASC,OAFZ,cAEVC,EAFU,yBAGTA,GAHS,2CAAH,qDAMbC,CAAU,CAAEL,IAAKT,IAAee,KAAKT,KAEtC,CAACN,IACG,kBAAC,IAAkBG,EAAOE,IAWnCP,EAASkB,aAAe,CACtBf,eAAgB,gCAGHH,Q,gBCNAmB,MA3Bf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,uDAEF,qFACA,8DACA,6BACE,kBAAC,EAAD,iCAEF,6BACE,kBAAC,EAAD,CAAUlB,YAAamB,OAEzB,yBACEC,MAAO,CACLC,WAAY,qBACZC,UAAW,OACXC,QAAS,QAGX,kBAAC,EAAD,CAAUvB,YAAY,qFCfVwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAACsB,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.9d65da36.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport MarkdownToJsx from 'markdown-to-jsx';\n\nconst Markdown = ({\n  markdown,\n  markdownUrl,\n  loadingMessage,\n  children,\n  ...rest\n}) => {\n  const [content, setContent] = useState(\n    children || markdown || loadingMessage\n  );\n  useEffect(() => {\n    const fetchText = async ({ url }) => {\n      const response = await fetch(url);\n      const body = await response.text();\n      return body;\n    };\n    if (markdownUrl) {\n      fetchText({ url: markdownUrl }).then(setContent);\n    }\n  }, [markdownUrl]);\n  return <MarkdownToJsx {...rest}>{content}</MarkdownToJsx>;\n};\n\nMarkdown.propTypes = {\n  markdown: PropTypes.string,\n  markdownUrl: PropTypes.string,\n  loadingMessage: PropTypes.string,\n  children: PropTypes.node,\n  rest: PropTypes.any,\n};\n\nMarkdown.defaultProps = {\n  loadingMessage: '##### processing markdown...',\n};\n\nexport default Markdown;\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Markdown from './components/presentation/markdown/markdown';\nimport test from './test.md';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>React-Kit Documentation</p>\n      </header>\n      <p>my favorite packages and components together, forever.</p>\n      <div>The first component: Markdown</div>\n      <div>\n        <Markdown>##### This is markdown!</Markdown>\n      </div>\n      <div>\n        <Markdown markdownUrl={test} />\n      </div>\n      <div\n        style={{\n          background: 'rgb(246, 248, 250)',\n          textAlign: 'left',\n          padding: '1em',\n        }}\n      >\n        <Markdown markdownUrl=\"https://raw.githubusercontent.com/probablyup/markdown-to-jsx/master/README.md\" />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/test.60f82d12.md\";"],"sourceRoot":""}