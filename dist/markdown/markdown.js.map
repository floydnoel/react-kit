{"version":3,"sources":["../../src/components/markdown/markdown.js"],"names":["React","useState","useEffect","PropTypes","MarkdownToJsx","Link","getSectionContent","Markdown","markdown","markdownUrl","link","section","children","initializingMessage","fetchingMessage","noMarkdownMessage","rest","content","setContent","fetchText","url","response","fetch","body","text","then","con","indexOf","options","overrides","a","component","propTypes","string","element","any","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\nimport MarkdownToJsx from 'markdown-to-jsx'\nimport { Link } from 'components'\n\nimport { getSectionContent } from './markdown-utils'\n\n// ***TODOS***\n// - better code blocks & styling\n// - handle external links\n// - option to throw instead?\n// - log possible errors?\n\nlet Markdown = ({\n  markdown,\n  markdownUrl,\n  link = Link, // setting this in the default props causes a test to fail\n  section,\n  children = markdown,\n  // verbose,\n  initializingMessage,\n  fetchingMessage,\n  noMarkdownMessage,\n  ...rest\n}) => {\n  let [content, setContent] = useState(children || initializingMessage)\n  useEffect(() => {\n    let fetchText = async ({ url }) => {\n      let response = await fetch(url)\n      let body = await response.text()\n      return body\n    }\n    if (markdownUrl) {\n      if (fetchingMessage) setContent(fetchingMessage)\n      fetchText({ url: markdownUrl }).then((content) => {\n        if (section) {\n          let con = getSectionContent({ content, section })\n          setContent(con ? con : noMarkdownMessage)\n        } else if (content.indexOf('<!DOCTYPE html>') === 0) {\n          setContent(noMarkdownMessage)\n        } else {\n          setContent(content)\n        }\n      })\n    }\n  }, [fetchingMessage, noMarkdownMessage, markdownUrl, section])\n\n  if (!children && !markdownUrl) return noMarkdownMessage\n  return (\n    <MarkdownToJsx\n      {...{\n        options: {\n          overrides: {\n            a: {\n              component: link,\n              // props: {\n              //   className: 'foo',\n              // },\n            },\n          },\n        },\n        // style: {\n        //   animation: 'slidein 3s',\n        // },\n        ...rest,\n      }}\n    >\n      {content}\n    </MarkdownToJsx>\n  )\n}\n\nMarkdown.propTypes = {\n  markdown: PropTypes.string,\n  markdownUrl: PropTypes.string,\n  link: PropTypes.element,\n  section: PropTypes.string,\n  children: PropTypes.string,\n  // verbose: PropTypes.bool,\n  initializingMessage: PropTypes.string,\n  fetchingMessage: PropTypes.string,\n  noMarkdownMessage: PropTypes.string,\n  rest: PropTypes.any,\n}\n\nMarkdown.defaultProps = {\n  // verbose: true,\n  // link: Link,\n  initializingMessage: '',\n  fetchingMessage: '',\n  noMarkdownMessage: '',\n}\n\nexport default Markdown\n"],"file":"markdown.js"}