{"version":3,"sources":["../../../src/components/presentation/markdown/markdown.js"],"names":["React","useState","useEffect","PropTypes","MarkdownToJsx","Markdown","markdown","markdownUrl","loadingMessage","children","rest","content","setContent","fetchText","url","response","fetch","body","text","then","propTypes","string","node","any","defaultProps"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAChBC,EAAAA,QADgB;AAEhBC,EAAAA,WAFgB;AAGhBC,EAAAA,cAHgB;AAIhBC,EAAAA,QAJgB;AAKhB,KAAGC;AALa,CAAD,KAMX;AACJ,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CACpCQ,QAAQ,IAAIH,QAAZ,IAAwBE,cADY,CAAtC;AAGAN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,SAAS,GAAG,OAAO;AAAEC,MAAAA;AAAF,KAAP,KAAmB;AACnC,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;AACA,YAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,aAAOD,IAAP;AACD,KAJD;;AAKA,QAAIV,WAAJ,EAAiB;AACfM,MAAAA,SAAS,CAAC;AAAEC,QAAAA,GAAG,EAAEP;AAAP,OAAD,CAAT,CAAgCY,IAAhC,CAAqCP,UAArC;AACD;AACF,GATQ,EASN,CAACL,WAAD,CATM,CAAT;AAUA,sBAAO,oBAAC,aAAD,EAAmBG,IAAnB,EAA0BC,OAA1B,CAAP;AACD,CArBD;;AAuBAN,QAAQ,CAACe,SAAT,GAAqB;AACnBd,EAAAA,QAAQ,EAAEH,SAAS,CAACkB,MADD;AAEnBd,EAAAA,WAAW,EAAEJ,SAAS,CAACkB,MAFJ;AAGnBb,EAAAA,cAAc,EAAEL,SAAS,CAACkB,MAHP;AAInBZ,EAAAA,QAAQ,EAAEN,SAAS,CAACmB,IAJD;AAKnBZ,EAAAA,IAAI,EAAEP,SAAS,CAACoB;AALG,CAArB;AAQAlB,QAAQ,CAACmB,YAAT,GAAwB;AACtBhB,EAAAA,cAAc,EAAE;AADM,CAAxB;AAIA,eAAeH,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport MarkdownToJsx from \"markdown-to-jsx\";\n\nconst Markdown = ({\n  markdown,\n  markdownUrl,\n  loadingMessage,\n  children,\n  ...rest\n}) => {\n  const [content, setContent] = useState(\n    children || markdown || loadingMessage\n  );\n  useEffect(() => {\n    const fetchText = async ({ url }) => {\n      const response = await fetch(url);\n      const body = await response.text();\n      return body;\n    };\n    if (markdownUrl) {\n      fetchText({ url: markdownUrl }).then(setContent);\n    }\n  }, [markdownUrl]);\n  return <MarkdownToJsx {...rest}>{content}</MarkdownToJsx>;\n};\n\nMarkdown.propTypes = {\n  markdown: PropTypes.string,\n  markdownUrl: PropTypes.string,\n  loadingMessage: PropTypes.string,\n  children: PropTypes.node,\n  rest: PropTypes.any,\n};\n\nMarkdown.defaultProps = {\n  loadingMessage: \"##### processing markdown...\",\n};\n\nexport default Markdown;\n"],"file":"markdown.js"}